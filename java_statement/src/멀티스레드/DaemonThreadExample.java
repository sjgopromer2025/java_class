package 멀티스레드;

public class DaemonThreadExample {
    public static void main(String[] args) {
        Thread daemonThread = new Thread(() -> {
            while (true) {
                System.out.println("데몬 스레드 실행 중...");
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        daemonThread.setDaemon(true); // 데몬 스레드로 설정
        daemonThread.start();

        System.out.println("메인 스레드 종료.");
    }
}

/*
 * 이론 설명:
 * 1. 데몬 스레드란?
 * - 데몬 스레드는 다른 스레드(사용자 스레드)의 작업을 지원하는 백그라운드 스레드입니다.
 * - 모든 사용자 스레드가 종료되면 데몬 스레드도 자동으로 종료됩니다.
 * - 예: 가비지 컬렉터, 백그라운드 데이터 동기화, 로그 기록 등.
 * 
 * 2. 데몬 스레드의 특징:
 * - 데몬 스레드는 사용자 스레드가 실행 중일 때만 동작합니다.
 * - 사용자 스레드가 모두 종료되면 데몬 스레드는 강제로 종료됩니다.
 * - 데몬 스레드는 일반적으로 무한 루프 또는 대기 상태로 동작하며, 백그라운드 작업을 수행합니다.
 * 
 * 3. 주요 메서드:
 * - `setDaemon(boolean on)`: 스레드를 데몬 스레드로 설정합니다. 반드시 `start()` 메서드 호출 전에 설정해야
 * 합니다.
 * - `isDaemon()`: 스레드가 데몬 스레드인지 확인합니다.
 * 
 * 4. 사용 사례:
 * - **가비지 컬렉터**: JVM에서 자동으로 메모리를 관리하는 데 사용.
 * - **백그라운드 데이터 동기화**: 클라우드 서비스에서 데이터를 주기적으로 동기화.
 * - **로그 기록**: 애플리케이션의 로그를 백그라운드에서 기록.
 * - **네트워크 연결 유지**: 서버와의 연결을 유지하거나 상태를 확인.
 * 
 * 5. 주의사항:
 * - 데몬 스레드는 사용자 스레드가 종료되면 강제로 종료되므로, 중요한 작업을 데몬 스레드에서 처리하면 안 됩니다.
 * - 데몬 스레드 설정은 `start()` 메서드 호출 전에만 가능합니다. 호출 후 설정하려고 하면
 * `IllegalThreadStateException`이 발생합니다.
 * - 데몬 스레드가 강제로 종료되면, 해당 스레드에서 처리 중이던 작업은 완료되지 않을 수 있습니다.
 * 
 * 6. 데몬 스레드와 사용자 스레드의 차이:
 * - **사용자 스레드**:
 * - 애플리케이션의 주요 작업을 수행.
 * - 모든 사용자 스레드가 종료되면 JVM이 종료.
 * 
 * - **데몬 스레드**:
 * - 사용자 스레드를 지원하는 보조 작업 수행.
 * - 모든 사용자 스레드가 종료되면 데몬 스레드도 종료.
 * 
 * 7. 실행 흐름:
 * - 데몬 스레드는 일반적으로 무한 루프 또는 대기 상태로 동작하며, 사용자 스레드가 종료되면 즉시 종료됩니다.
 * - 예를 들어, 위 코드에서 메인 스레드가 종료되면 데몬 스레드도 종료됩니다.
 */